(define car
  (lambda ((x . y))
    x))

(define cdr
  (lambda ((x . y))
    y))

(define caar
  (lambda (x)
    (car (car x))))

(define cadr
  (lambda (x)
    (car (cdr x))))

(define cdar
  (lambda (x)
    (cdr (car x))))

(define cddr
  (lambda (x)
    (cdr (cdr x))))

(define map
  (lambda (f list)
    (if (null? list)
      '()
      (let (((x . xs) list))
        (cons (f x) (map f xs))))))

(define list*
  (lambda args
    (if (null? args)
      '()
      (if (null? (cdr args))
        (car args)
        (cons (car args) (list* (cdr args)))))))
